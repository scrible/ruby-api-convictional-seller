=begin
#Seller API

#This API reference documents endpoints that are exclusive to sellers.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module ConvictionalSeller
  class Product
    # The Convictional product ID. Read only.
    attr_accessor :_id

    # The seller's unique code for this product.
    attr_accessor :code

    # Is this product active? Active products are visible to partners.
    attr_accessor :active

    # The HTML body. Input will be sanitized before saving.
    attr_accessor :body_html

    # Images of the product. Must be accessible via public URL.
    attr_accessor :images

    # Add tags to the product to make it easier for buyers to categorize.
    attr_accessor :tags

    # The name of the product.
    attr_accessor :title

    # Include one variant per size, color, etc. If there are no variants then include a single entry to be the default.
    attr_accessor :variants

    # The vendor of the product.
    attr_accessor :vendor

    attr_accessor :options

    attr_accessor :google_product_category

    # Attributes are to be used to store additional details regarding this resource that are not supported on the Convictional resource. The object keys are the names for your attributes.
    attr_accessor :attributes

    attr_accessor :custom

    # The date this product was created. Read only.
    attr_accessor :created

    # The date this product was last updated. Read only.
    attr_accessor :updated

    # The legacy company ID of the seller. Read only.
    attr_accessor :company_id

    # Is this product delisted? Read only.
    attr_accessor :delisted

    # The date this product was delisted. Read only.
    attr_accessor :delisted_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'code' => :'code',
        :'active' => :'active',
        :'body_html' => :'bodyHtml',
        :'images' => :'images',
        :'tags' => :'tags',
        :'title' => :'title',
        :'variants' => :'variants',
        :'vendor' => :'vendor',
        :'options' => :'options',
        :'google_product_category' => :'googleProductCategory',
        :'attributes' => :'attributes',
        :'custom' => :'custom',
        :'created' => :'created',
        :'updated' => :'updated',
        :'company_id' => :'companyId',
        :'delisted' => :'delisted',
        :'delisted_at' => :'delistedAt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_id' => :'String',
        :'code' => :'String',
        :'active' => :'Boolean',
        :'body_html' => :'String',
        :'images' => :'Array<Image>',
        :'tags' => :'Array<String>',
        :'title' => :'String',
        :'variants' => :'Array<Variant>',
        :'vendor' => :'String',
        :'options' => :'Array<ProductOptions>',
        :'google_product_category' => :'GoogleProductCategory',
        :'attributes' => :'Hash<String, Object>',
        :'custom' => :'Array<Object>',
        :'created' => :'Time',
        :'updated' => :'Time',
        :'company_id' => :'String',
        :'delisted' => :'Boolean',
        :'delisted_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConvictionalSeller::Product` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConvictionalSeller::Product`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'body_html')
        self.body_html = attributes[:'body_html']
      end

      if attributes.key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'variants')
        if (value = attributes[:'variants']).is_a?(Array)
          self.variants = value
        end
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'options')
        if (value = attributes[:'options']).is_a?(Array)
          self.options = value
        end
      end

      if attributes.key?(:'google_product_category')
        self.google_product_category = attributes[:'google_product_category']
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Hash)
          self.attributes = value
        end
      end

      if attributes.key?(:'custom')
        if (value = attributes[:'custom']).is_a?(Array)
          self.custom = value
        end
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'delisted')
        self.delisted = attributes[:'delisted']
      end

      if attributes.key?(:'delisted_at')
        self.delisted_at = attributes[:'delisted_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @variants.nil?
        invalid_properties.push('invalid value for "variants", variants cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @code.nil?
      return false if @title.nil?
      return false if @variants.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          code == o.code &&
          active == o.active &&
          body_html == o.body_html &&
          images == o.images &&
          tags == o.tags &&
          title == o.title &&
          variants == o.variants &&
          vendor == o.vendor &&
          options == o.options &&
          google_product_category == o.google_product_category &&
          attributes == o.attributes &&
          custom == o.custom &&
          created == o.created &&
          updated == o.updated &&
          company_id == o.company_id &&
          delisted == o.delisted &&
          delisted_at == o.delisted_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_id, code, active, body_html, images, tags, title, variants, vendor, options, google_product_category, attributes, custom, created, updated, company_id, delisted, delisted_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConvictionalSeller.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

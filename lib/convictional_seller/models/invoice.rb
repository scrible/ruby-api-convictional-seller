=begin
#Seller API

#This API reference documents endpoints that are exclusive to sellers.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module ConvictionalSeller
  class Invoice
    # The Convictional invoice ID. Read only.
    attr_accessor :_id

    # Amount paid on the inoice.
    attr_accessor :amount_paid

    # Application Fee of the invoice.
    attr_accessor :application_fee

    # Currency code (e.g. CAD).
    attr_accessor :currency

    # The time the invoice was created. Read Only.
    attr_accessor :created

    # The time the invoice was updated. Read Only.
    attr_accessor :updated

    # Notification flag.
    attr_accessor :notified

    # The time the notification flag was set.
    attr_accessor :notified_date

    # Flag if the invoice was paid.
    attr_accessor :paid

    # The time the invoice was paid.
    attr_accessor :paid_date

    # Flag if the invoice was refunded.
    attr_accessor :refunded

    # The time the invoice was refunded.
    attr_accessor :refunded_date

    # Download link to the invoice from integrations we utilize, like Stripe
    attr_accessor :download

    # Hosted link to the invoice from integrations we utilize, like Stripe
    attr_accessor :hosted_url

    # The date the invoice is due.
    attr_accessor :due_date

    # ID of the buyer company. Read Only.
    attr_accessor :buyer_id

    # ID of the seller company. Read Only.
    attr_accessor :seller_id

    # Convictional ID for the Buyer Company. Read Only.
    attr_accessor :buyer_company_object_id

    # Convictional ID for the Seller Company. Read Only.
    attr_accessor :seller_company_object_id

    attr_accessor :custom

    # Indicates if the EDI (810) document has been sent.
    attr_accessor :edi_sent

    # The line items on the order.
    attr_accessor :taxes

    # The line items on the order.
    attr_accessor :items

    # Indicates if the invoice has been posted to the buyer's platform.
    attr_accessor :posted

    # Buyer's specific code for the invoice.
    attr_accessor :buyer_code

    # Seller's specific code for the invoice.
    attr_accessor :seller_code

    # Source of the invoice.
    attr_accessor :source

    # ID from the source of invoice.
    attr_accessor :source_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'amount_paid' => :'amountPaid',
        :'application_fee' => :'applicationFee',
        :'currency' => :'currency',
        :'created' => :'created',
        :'updated' => :'updated',
        :'notified' => :'notified',
        :'notified_date' => :'notifiedDate',
        :'paid' => :'paid',
        :'paid_date' => :'paidDate',
        :'refunded' => :'refunded',
        :'refunded_date' => :'refundedDate',
        :'download' => :'download',
        :'hosted_url' => :'hostedUrl',
        :'due_date' => :'dueDate',
        :'buyer_id' => :'buyerId',
        :'seller_id' => :'sellerId',
        :'buyer_company_object_id' => :'buyerCompanyObjectId',
        :'seller_company_object_id' => :'sellerCompanyObjectId',
        :'custom' => :'custom',
        :'edi_sent' => :'EDISent',
        :'taxes' => :'taxes',
        :'items' => :'items',
        :'posted' => :'posted',
        :'buyer_code' => :'buyerCode',
        :'seller_code' => :'sellerCode',
        :'source' => :'source',
        :'source_id' => :'sourceId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_id' => :'String',
        :'amount_paid' => :'Integer',
        :'application_fee' => :'Integer',
        :'currency' => :'String',
        :'created' => :'String',
        :'updated' => :'String',
        :'notified' => :'Boolean',
        :'notified_date' => :'String',
        :'paid' => :'Boolean',
        :'paid_date' => :'String',
        :'refunded' => :'Boolean',
        :'refunded_date' => :'String',
        :'download' => :'String',
        :'hosted_url' => :'String',
        :'due_date' => :'String',
        :'buyer_id' => :'String',
        :'seller_id' => :'String',
        :'buyer_company_object_id' => :'String',
        :'seller_company_object_id' => :'String',
        :'custom' => :'Array<Object>',
        :'edi_sent' => :'Boolean',
        :'taxes' => :'Array<SellerTax>',
        :'items' => :'Array<SellerInvoiceItem>',
        :'posted' => :'Boolean',
        :'buyer_code' => :'String',
        :'seller_code' => :'String',
        :'source' => :'String',
        :'source_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConvictionalSeller::Invoice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConvictionalSeller::Invoice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.key?(:'amount_paid')
        self.amount_paid = attributes[:'amount_paid']
      end

      if attributes.key?(:'application_fee')
        self.application_fee = attributes[:'application_fee']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'notified')
        self.notified = attributes[:'notified']
      end

      if attributes.key?(:'notified_date')
        self.notified_date = attributes[:'notified_date']
      end

      if attributes.key?(:'paid')
        self.paid = attributes[:'paid']
      end

      if attributes.key?(:'paid_date')
        self.paid_date = attributes[:'paid_date']
      end

      if attributes.key?(:'refunded')
        self.refunded = attributes[:'refunded']
      end

      if attributes.key?(:'refunded_date')
        self.refunded_date = attributes[:'refunded_date']
      end

      if attributes.key?(:'download')
        self.download = attributes[:'download']
      end

      if attributes.key?(:'hosted_url')
        self.hosted_url = attributes[:'hosted_url']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'buyer_id')
        self.buyer_id = attributes[:'buyer_id']
      end

      if attributes.key?(:'seller_id')
        self.seller_id = attributes[:'seller_id']
      end

      if attributes.key?(:'buyer_company_object_id')
        self.buyer_company_object_id = attributes[:'buyer_company_object_id']
      end

      if attributes.key?(:'seller_company_object_id')
        self.seller_company_object_id = attributes[:'seller_company_object_id']
      end

      if attributes.key?(:'custom')
        if (value = attributes[:'custom']).is_a?(Array)
          self.custom = value
        end
      end

      if attributes.key?(:'edi_sent')
        self.edi_sent = attributes[:'edi_sent']
      end

      if attributes.key?(:'taxes')
        if (value = attributes[:'taxes']).is_a?(Array)
          self.taxes = value
        end
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'posted')
        self.posted = attributes[:'posted']
      end

      if attributes.key?(:'buyer_code')
        self.buyer_code = attributes[:'buyer_code']
      end

      if attributes.key?(:'seller_code')
        self.seller_code = attributes[:'seller_code']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'source_id')
        self.source_id = attributes[:'source_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          amount_paid == o.amount_paid &&
          application_fee == o.application_fee &&
          currency == o.currency &&
          created == o.created &&
          updated == o.updated &&
          notified == o.notified &&
          notified_date == o.notified_date &&
          paid == o.paid &&
          paid_date == o.paid_date &&
          refunded == o.refunded &&
          refunded_date == o.refunded_date &&
          download == o.download &&
          hosted_url == o.hosted_url &&
          due_date == o.due_date &&
          buyer_id == o.buyer_id &&
          seller_id == o.seller_id &&
          buyer_company_object_id == o.buyer_company_object_id &&
          seller_company_object_id == o.seller_company_object_id &&
          custom == o.custom &&
          edi_sent == o.edi_sent &&
          taxes == o.taxes &&
          items == o.items &&
          posted == o.posted &&
          buyer_code == o.buyer_code &&
          seller_code == o.seller_code &&
          source == o.source &&
          source_id == o.source_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_id, amount_paid, application_fee, currency, created, updated, notified, notified_date, paid, paid_date, refunded, refunded_date, download, hosted_url, due_date, buyer_id, seller_id, buyer_company_object_id, seller_company_object_id, custom, edi_sent, taxes, items, posted, buyer_code, seller_code, source, source_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConvictionalSeller.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

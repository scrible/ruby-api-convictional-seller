=begin
#Seller API

#This API reference documents endpoints that are exclusive to sellers.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module ConvictionalSeller
  class Order
    # The Convictional order ID. Read only.
    attr_accessor :_id

    # ID of the order in the buyer's system.
    attr_accessor :buyer_order_code

    # ID of the order in the seller's system.
    attr_accessor :seller_order_code

    # ID of the buyer company.
    attr_accessor :buyer_company_id

    # ID of the seller company.
    attr_accessor :seller_company_id

    # Email for notifications.
    attr_accessor :buyer_email

    # Currency code (e.g. CAD).
    attr_accessor :currency

    # ID of the associated invoice.
    attr_accessor :invoice_id

    # A note relating to the order.
    attr_accessor :note

    # Indicates if any line items have been cancelled.
    attr_accessor :has_cancellations

    attr_accessor :shipping_address

    # The number of hours between the order being posted and the order being fulfilled. Null if not fulfilled.
    attr_accessor :fill_time

    # The number of hours between the order being created and the order being shipped.
    attr_accessor :ship_time

    # The URL to download a packing slip for this order.
    attr_accessor :packing_slip

    attr_accessor :custom

    # The line items on the order.
    attr_accessor :items

    # The time the order was created. Read Only.
    attr_accessor :created

    # The time the order was updated. Read Only.
    attr_accessor :updated

    # Indicates if the order has been posted to the seller's platform. Read Only.
    attr_accessor :posted

    # The time the order was posted to the seller's platform. Read Only.
    attr_accessor :posted_date

    # Indicates if the order has been fully shipped. Read Only.
    attr_accessor :shipped

    # The time the order was fully shipped. Read Only.
    attr_accessor :shipped_date

    # Indicates if the order has been invoiced. Read Only.
    attr_accessor :billed

    # The time the order was invoiced. Read Only.
    attr_accessor :billed_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'buyer_order_code' => :'buyerOrderCode',
        :'seller_order_code' => :'sellerOrderCode',
        :'buyer_company_id' => :'buyerCompanyId',
        :'seller_company_id' => :'sellerCompanyId',
        :'buyer_email' => :'buyerEmail',
        :'currency' => :'currency',
        :'invoice_id' => :'invoiceId',
        :'note' => :'note',
        :'has_cancellations' => :'hasCancellations',
        :'shipping_address' => :'shippingAddress',
        :'fill_time' => :'fillTime',
        :'ship_time' => :'shipTime',
        :'packing_slip' => :'packingSlip',
        :'custom' => :'custom',
        :'items' => :'items',
        :'created' => :'created',
        :'updated' => :'updated',
        :'posted' => :'posted',
        :'posted_date' => :'postedDate',
        :'shipped' => :'shipped',
        :'shipped_date' => :'shippedDate',
        :'billed' => :'billed',
        :'billed_date' => :'billedDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_id' => :'String',
        :'buyer_order_code' => :'String',
        :'seller_order_code' => :'String',
        :'buyer_company_id' => :'String',
        :'seller_company_id' => :'String',
        :'buyer_email' => :'String',
        :'currency' => :'String',
        :'invoice_id' => :'String',
        :'note' => :'String',
        :'has_cancellations' => :'Boolean',
        :'shipping_address' => :'Address',
        :'fill_time' => :'Float',
        :'ship_time' => :'Float',
        :'packing_slip' => :'String',
        :'custom' => :'Array<Object>',
        :'items' => :'Array<OrderItem>',
        :'created' => :'String',
        :'updated' => :'String',
        :'posted' => :'Boolean',
        :'posted_date' => :'String',
        :'shipped' => :'Boolean',
        :'shipped_date' => :'String',
        :'billed' => :'Boolean',
        :'billed_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'fill_time',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConvictionalSeller::Order` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConvictionalSeller::Order`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.key?(:'buyer_order_code')
        self.buyer_order_code = attributes[:'buyer_order_code']
      end

      if attributes.key?(:'seller_order_code')
        self.seller_order_code = attributes[:'seller_order_code']
      end

      if attributes.key?(:'buyer_company_id')
        self.buyer_company_id = attributes[:'buyer_company_id']
      end

      if attributes.key?(:'seller_company_id')
        self.seller_company_id = attributes[:'seller_company_id']
      end

      if attributes.key?(:'buyer_email')
        self.buyer_email = attributes[:'buyer_email']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'invoice_id')
        self.invoice_id = attributes[:'invoice_id']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'has_cancellations')
        self.has_cancellations = attributes[:'has_cancellations']
      end

      if attributes.key?(:'shipping_address')
        self.shipping_address = attributes[:'shipping_address']
      end

      if attributes.key?(:'fill_time')
        self.fill_time = attributes[:'fill_time']
      end

      if attributes.key?(:'ship_time')
        self.ship_time = attributes[:'ship_time']
      end

      if attributes.key?(:'packing_slip')
        self.packing_slip = attributes[:'packing_slip']
      end

      if attributes.key?(:'custom')
        if (value = attributes[:'custom']).is_a?(Array)
          self.custom = value
        end
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'posted')
        self.posted = attributes[:'posted']
      end

      if attributes.key?(:'posted_date')
        self.posted_date = attributes[:'posted_date']
      end

      if attributes.key?(:'shipped')
        self.shipped = attributes[:'shipped']
      end

      if attributes.key?(:'shipped_date')
        self.shipped_date = attributes[:'shipped_date']
      end

      if attributes.key?(:'billed')
        self.billed = attributes[:'billed']
      end

      if attributes.key?(:'billed_date')
        self.billed_date = attributes[:'billed_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          buyer_order_code == o.buyer_order_code &&
          seller_order_code == o.seller_order_code &&
          buyer_company_id == o.buyer_company_id &&
          seller_company_id == o.seller_company_id &&
          buyer_email == o.buyer_email &&
          currency == o.currency &&
          invoice_id == o.invoice_id &&
          note == o.note &&
          has_cancellations == o.has_cancellations &&
          shipping_address == o.shipping_address &&
          fill_time == o.fill_time &&
          ship_time == o.ship_time &&
          packing_slip == o.packing_slip &&
          custom == o.custom &&
          items == o.items &&
          created == o.created &&
          updated == o.updated &&
          posted == o.posted &&
          posted_date == o.posted_date &&
          shipped == o.shipped &&
          shipped_date == o.shipped_date &&
          billed == o.billed &&
          billed_date == o.billed_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_id, buyer_order_code, seller_order_code, buyer_company_id, seller_company_id, buyer_email, currency, invoice_id, note, has_cancellations, shipping_address, fill_time, ship_time, packing_slip, custom, items, created, updated, posted, posted_date, shipped, shipped_date, billed, billed_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConvictionalSeller.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

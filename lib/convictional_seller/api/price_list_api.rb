=begin
#Seller API

#This API reference documents endpoints that are exclusive to sellers.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'cgi'

module ConvictionalSeller
  class PriceListApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete price list
    # An endpoint for permanently deleting price lists.
    # @param price_id [String] ID of the price list
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def delete_price_list_by_id(price_id, opts = {})
      data, _status_code, _headers = delete_price_list_by_id_with_http_info(price_id, opts)
      data
    end

    # Delete price list
    # An endpoint for permanently deleting price lists.
    # @param price_id [String] ID of the price list
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def delete_price_list_by_id_with_http_info(price_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PriceListApi.delete_price_list_by_id ...'
      end
      # verify the required parameter 'price_id' is set
      if @api_client.config.client_side_validation && price_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_id' when calling PriceListApi.delete_price_list_by_id"
      end
      # resource path
      local_var_path = '/prices/{priceId}'.sub('{' + 'priceId' + '}', CGI.escape(price_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PriceListApi.delete_price_list_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PriceListApi#delete_price_list_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get price list
    # An endpoint for retrieving price lists. In cases where a price list may contain invalid SKUs, those SKUs are not included in the response.
    # @param price_id [String] ID of the price list
    # @param [Hash] opts the optional parameters
    # @return [Price]
    def get_price_list_by_id(price_id, opts = {})
      data, _status_code, _headers = get_price_list_by_id_with_http_info(price_id, opts)
      data
    end

    # Get price list
    # An endpoint for retrieving price lists. In cases where a price list may contain invalid SKUs, those SKUs are not included in the response.
    # @param price_id [String] ID of the price list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Price, Integer, Hash)>] Price data, response status code and response headers
    def get_price_list_by_id_with_http_info(price_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PriceListApi.get_price_list_by_id ...'
      end
      # verify the required parameter 'price_id' is set
      if @api_client.config.client_side_validation && price_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_id' when calling PriceListApi.get_price_list_by_id"
      end
      # resource path
      local_var_path = '/prices/{priceId}'.sub('{' + 'priceId' + '}', CGI.escape(price_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Price'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PriceListApi.get_price_list_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PriceListApi#get_price_list_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get price list template
    # Returns a CSV template that can be filled with retail and base prices for all variants and then upload it to /prices/upload
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_price_list_template(authorization, opts = {})
      data, _status_code, _headers = get_price_list_template_with_http_info(authorization, opts)
      data
    end

    # Get price list template
    # Returns a CSV template that can be filled with retail and base prices for all variants and then upload it to /prices/upload
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_price_list_template_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PriceListApi.get_price_list_template ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PriceListApi.get_price_list_template"
      end
      # resource path
      local_var_path = '/templates/price'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PriceListApi.get_price_list_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PriceListApi#get_price_list_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create price list
    # An endpoint to create a price list for the given company API key
    # @param price [Price] All the fields in a pricelist
    # @param [Hash] opts the optional parameters
    # @return [Price]
    def post_price_list(price, opts = {})
      data, _status_code, _headers = post_price_list_with_http_info(price, opts)
      data
    end

    # Create price list
    # An endpoint to create a price list for the given company API key
    # @param price [Price] All the fields in a pricelist
    # @param [Hash] opts the optional parameters
    # @return [Array<(Price, Integer, Hash)>] Price data, response status code and response headers
    def post_price_list_with_http_info(price, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PriceListApi.post_price_list ...'
      end
      # verify the required parameter 'price' is set
      if @api_client.config.client_side_validation && price.nil?
        fail ArgumentError, "Missing the required parameter 'price' when calling PriceListApi.post_price_list"
      end
      # resource path
      local_var_path = '/prices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(price)

      # return_type
      return_type = opts[:debug_return_type] || 'Price'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PriceListApi.post_price_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PriceListApi#post_price_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload price list
    # An endpoint for creating new price lists using a CSV file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of the new price list.
    # @option opts [Array<Object>] :file A CSV file containing price list information. The following fields represent the columns in the CSV file. All columns must be present in the given order and the first row of each column must contain the exact header from below. The columns marked as read only must still be included in requests, but can be blank except for the header.
    # @return [InlineResponse2002]
    def post_price_list_csv(opts = {})
      data, _status_code, _headers = post_price_list_csv_with_http_info(opts)
      data
    end

    # Upload price list
    # An endpoint for creating new price lists using a CSV file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of the new price list.
    # @option opts [Array<Object>] :file A CSV file containing price list information. The following fields represent the columns in the CSV file. All columns must be present in the given order and the first row of each column must contain the exact header from below. The columns marked as read only must still be included in requests, but can be blank except for the header.
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def post_price_list_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PriceListApi.post_price_list_csv ...'
      end
      # resource path
      local_var_path = '/prices/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['file'] = @api_client.build_collection_param(opts[:'file'], :csv) if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2002'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PriceListApi.post_price_list_csv",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PriceListApi#post_price_list_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update price list
    # An endpoint for fully updating price lists.
    # @param price_id [String] ID of the price list
    # @param [Hash] opts the optional parameters
    # @option opts [PriceUpdate] :price_update 
    # @return [Price]
    def put_price_list_by_id(price_id, opts = {})
      data, _status_code, _headers = put_price_list_by_id_with_http_info(price_id, opts)
      data
    end

    # Update price list
    # An endpoint for fully updating price lists.
    # @param price_id [String] ID of the price list
    # @param [Hash] opts the optional parameters
    # @option opts [PriceUpdate] :price_update 
    # @return [Array<(Price, Integer, Hash)>] Price data, response status code and response headers
    def put_price_list_by_id_with_http_info(price_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PriceListApi.put_price_list_by_id ...'
      end
      # verify the required parameter 'price_id' is set
      if @api_client.config.client_side_validation && price_id.nil?
        fail ArgumentError, "Missing the required parameter 'price_id' when calling PriceListApi.put_price_list_by_id"
      end
      # resource path
      local_var_path = '/prices/{priceId}'.sub('{' + 'priceId' + '}', CGI.escape(price_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'price_update'])

      # return_type
      return_type = opts[:debug_return_type] || 'Price'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PriceListApi.put_price_list_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PriceListApi#put_price_list_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

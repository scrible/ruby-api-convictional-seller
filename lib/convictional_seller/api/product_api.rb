=begin
#Seller API

#This API reference documents endpoints that are exclusive to sellers.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'cgi'

module ConvictionalSeller
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete product
    # An endpoint for deleting a product with the provided ID
    # @param product_id [String] ID of the product to delete
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_product_by_id(product_id, opts = {})
      data, _status_code, _headers = delete_product_by_id_with_http_info(product_id, opts)
      data
    end

    # Delete product
    # An endpoint for deleting a product with the provided ID
    # @param product_id [String] ID of the product to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_product_by_id_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.delete_product_by_id ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.delete_product_by_id"
      end
      # resource path
      local_var_path = '/products/{productId}'.sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.delete_product_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#delete_product_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete image
    # An endpoint for deleting a product image
    # @param product_id [String] ID of the product to be deleted from
    # @param image_id [String] ID of the image to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_product_image_by_id(product_id, image_id, opts = {})
      data, _status_code, _headers = delete_product_image_by_id_with_http_info(product_id, image_id, opts)
      data
    end

    # Delete image
    # An endpoint for deleting a product image
    # @param product_id [String] ID of the product to be deleted from
    # @param image_id [String] ID of the image to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_product_image_by_id_with_http_info(product_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.delete_product_image_by_id ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.delete_product_image_by_id"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ProductApi.delete_product_image_by_id"
      end
      # resource path
      local_var_path = '/products/{productId}/images/{imageId}'.sub('{' + 'productId' + '}', CGI.escape(product_id.to_s)).sub('{' + 'imageId' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.delete_product_image_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#delete_product_image_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product
    # An endpoint for getting products.
    # @param product_id [String] ID of the product to get
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def get_product_by_id(product_id, opts = {})
      data, _status_code, _headers = get_product_by_id_with_http_info(product_id, opts)
      data
    end

    # Get product
    # An endpoint for getting products.
    # @param product_id [String] ID of the product to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def get_product_by_id_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_product_by_id ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.get_product_by_id"
      end
      # resource path
      local_var_path = '/products/{productId}'.sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Product'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.get_product_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_product_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List products
    # An endpoint to get products, can be used by buyers or sellers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Filters products by title. This can either be an exact title or a title similar.
    # @option opts [String] :vendor Filters products by brand (e.g. product.vendor field values). Must be an exact match.
    # @option opts [String] :product_code Filters products by product code. This can either be an exact product code or a product code similar.
    # @option opts [Boolean] :active Filter out products are active or not active. This field is not required.
    # @option opts [String] :company_id Filters products by seller company ID. Must be an exact match.
    # @option opts [String] :tags Filters products by tags. This is comma delimited for multiple tags. It returns products that have at any of the tags. Must be an exact match. Sellers only.
    # @option opts [Integer] :page The page number of results to return. Note this is a zero-based index. (default to 0)
    # @option opts [Integer] :limit The number of results per page. Max is 250. (default to 25)
    # @return [Array<Product>]
    def get_products(opts = {})
      data, _status_code, _headers = get_products_with_http_info(opts)
      data
    end

    # List products
    # An endpoint to get products, can be used by buyers or sellers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Filters products by title. This can either be an exact title or a title similar.
    # @option opts [String] :vendor Filters products by brand (e.g. product.vendor field values). Must be an exact match.
    # @option opts [String] :product_code Filters products by product code. This can either be an exact product code or a product code similar.
    # @option opts [Boolean] :active Filter out products are active or not active. This field is not required.
    # @option opts [String] :company_id Filters products by seller company ID. Must be an exact match.
    # @option opts [String] :tags Filters products by tags. This is comma delimited for multiple tags. It returns products that have at any of the tags. Must be an exact match. Sellers only.
    # @option opts [Integer] :page The page number of results to return. Note this is a zero-based index.
    # @option opts [Integer] :limit The number of results per page. Max is 250.
    # @return [Array<(Array<Product>, Integer, Hash)>] Array<Product> data, response status code and response headers
    def get_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_products ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProductApi.get_products, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'vendor'] = opts[:'vendor'] if !opts[:'vendor'].nil?
      query_params[:'productCode'] = opts[:'product_code'] if !opts[:'product_code'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'companyId'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Product>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.get_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update product
    # An endpoint for partially updating a product with the provided ID. New variants, images, and options can be created by omitting their respective _id fields.
    # @param product_id [String] ID of the product to update
    # @param patch_product [PatchProduct] 
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def patch_product_by_id(product_id, patch_product, opts = {})
      data, _status_code, _headers = patch_product_by_id_with_http_info(product_id, patch_product, opts)
      data
    end

    # Update product
    # An endpoint for partially updating a product with the provided ID. New variants, images, and options can be created by omitting their respective _id fields.
    # @param product_id [String] ID of the product to update
    # @param patch_product [PatchProduct] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def patch_product_by_id_with_http_info(product_id, patch_product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.patch_product_by_id ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.patch_product_by_id"
      end
      # verify the required parameter 'patch_product' is set
      if @api_client.config.client_side_validation && patch_product.nil?
        fail ArgumentError, "Missing the required parameter 'patch_product' when calling ProductApi.patch_product_by_id"
      end
      # resource path
      local_var_path = '/products/{productId}'.sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_product)

      # return_type
      return_type = opts[:debug_return_type] || 'Product'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.patch_product_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#patch_product_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create product
    # An endpoint for sellers to create new products.
    # @param product [Product] All the fields in a product
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def post_products(product, opts = {})
      data, _status_code, _headers = post_products_with_http_info(product, opts)
      data
    end

    # Create product
    # An endpoint for sellers to create new products.
    # @param product [Product] All the fields in a product
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def post_products_with_http_info(product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.post_products ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling ProductApi.post_products"
      end
      # resource path
      local_var_path = '/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/csv'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product)

      # return_type
      return_type = opts[:debug_return_type] || 'Product'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.post_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#post_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

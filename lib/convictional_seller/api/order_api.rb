=begin
#Seller API

#This API reference documents endpoints that are exclusive to sellers.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'cgi'

module ConvictionalSeller
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel order
    # Use this endpoint to cancel an entire order. After an order is cancelled, order.hasCancellations=true and each order item will have orderItem.cancelled=true. Orders cannot be uncancelled afterwards. Any order can be cancelled, including flagged orders and unposted orders, as long as the order is not already fully cancelled or fully fulfilled. Partially fulfilled orders can only be cancelled if unfulfilledOnly=true is sent. When unfulfilledOnly=true is sent, order items that have already been fulfilled are not cancelled, and all unfulfilled order items are cancelled. If the order had no fulfillments, this endpoint behaves the same as when omitting the unfulfilledOnly flag. If the order had at least one fulfillment, then in addition to setting the cancelled status, order.shipped will be set to true and the order is now considered fully fulfilled. If an order item has been partially - but not completely - fulfilled, then that order item will be cancelled and a new uncancelled order item will be created representing the quantity that had already been fulfilled.
    # @param order_id [String] ID of the order to cancel
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param order_cancellation [OrderCancellation] An object with cancellation settings
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def cancel_order(order_id, authorization, order_cancellation, opts = {})
      data, _status_code, _headers = cancel_order_with_http_info(order_id, authorization, order_cancellation, opts)
      data
    end

    # Cancel order
    # Use this endpoint to cancel an entire order. After an order is cancelled, order.hasCancellations&#x3D;true and each order item will have orderItem.cancelled&#x3D;true. Orders cannot be uncancelled afterwards. Any order can be cancelled, including flagged orders and unposted orders, as long as the order is not already fully cancelled or fully fulfilled. Partially fulfilled orders can only be cancelled if unfulfilledOnly&#x3D;true is sent. When unfulfilledOnly&#x3D;true is sent, order items that have already been fulfilled are not cancelled, and all unfulfilled order items are cancelled. If the order had no fulfillments, this endpoint behaves the same as when omitting the unfulfilledOnly flag. If the order had at least one fulfillment, then in addition to setting the cancelled status, order.shipped will be set to true and the order is now considered fully fulfilled. If an order item has been partially - but not completely - fulfilled, then that order item will be cancelled and a new uncancelled order item will be created representing the quantity that had already been fulfilled.
    # @param order_id [String] ID of the order to cancel
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param order_cancellation [OrderCancellation] An object with cancellation settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def cancel_order_with_http_info(order_id, authorization, order_cancellation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.cancel_order ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 'order_cancellation' is set
      if @api_client.config.client_side_validation && order_cancellation.nil?
        fail ArgumentError, "Missing the required parameter 'order_cancellation' when calling OrderApi.cancel_order"
      end
      # resource path
      local_var_path = '/orders/{orderId}/cancel'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_cancellation)

      # return_type
      return_type = opts[:debug_return_type] || 'Order'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.cancel_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#cancel_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel order item
    # Cancel a single order item on an order. Order items are fully cancelled by default. Order items can be partially cancelled by using the newQuantity parameter. Note that doing a partial cancellation will cancel the original order item and create a new order item representing the uncancelled quantity. Fulfilled items cannot be cancelled.
    # @param order_id [String] ID of the order
    # @param item_id [String] ID of the order item
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param order_item_cancellation [OrderItemCancellation] 
    # @param [Hash] opts the optional parameters
    # @return [OrderItem]
    def cancel_order_item(order_id, item_id, authorization, order_item_cancellation, opts = {})
      data, _status_code, _headers = cancel_order_item_with_http_info(order_id, item_id, authorization, order_item_cancellation, opts)
      data
    end

    # Cancel order item
    # Cancel a single order item on an order. Order items are fully cancelled by default. Order items can be partially cancelled by using the newQuantity parameter. Note that doing a partial cancellation will cancel the original order item and create a new order item representing the uncancelled quantity. Fulfilled items cannot be cancelled.
    # @param order_id [String] ID of the order
    # @param item_id [String] ID of the order item
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param order_item_cancellation [OrderItemCancellation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderItem, Integer, Hash)>] OrderItem data, response status code and response headers
    def cancel_order_item_with_http_info(order_id, item_id, authorization, order_item_cancellation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.cancel_order_item ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.cancel_order_item"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling OrderApi.cancel_order_item"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling OrderApi.cancel_order_item"
      end
      # verify the required parameter 'order_item_cancellation' is set
      if @api_client.config.client_side_validation && order_item_cancellation.nil?
        fail ArgumentError, "Missing the required parameter 'order_item_cancellation' when calling OrderApi.cancel_order_item"
      end
      # resource path
      local_var_path = '/orders/{orderId}/items/{itemId}/cancel'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s)).sub('{' + 'itemId' + '}', CGI.escape(item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_item_cancellation)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.cancel_order_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#cancel_order_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order
    # An endpoint for getting an order.
    # @param order_id [String] ID of the order to get
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def get_order_by_id(order_id, opts = {})
      data, _status_code, _headers = get_order_by_id_with_http_info(order_id, opts)
      data
    end

    # Get order
    # An endpoint for getting an order.
    # @param order_id [String] ID of the order to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def get_order_by_id_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_by_id ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.get_order_by_id"
      end
      # resource path
      local_var_path = '/orders/{orderId}'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Order'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.get_order_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List orders
    # An endpoint for getting orders.
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of resources to return. (default to 0)
    # @option opts [Integer] :limit The number of resources to return. (default to 50)
    # @option opts [Boolean] :shipped Return orders that are marked as shipped.
    # @option opts [Boolean] :posted Return orders that are synced to the seller.
    # @option opts [Boolean] :billed Return orders that are marked as billed/invoiced.
    # @option opts [Boolean] :refunded Return orders that are marked as refunded.
    # @option opts [String] :created_min Return resources created after a given time. Use RFC 3339 format.
    # @return [Array<Order>]
    def get_orders(authorization, opts = {})
      data, _status_code, _headers = get_orders_with_http_info(authorization, opts)
      data
    end

    # List orders
    # An endpoint for getting orders.
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of resources to return.
    # @option opts [Integer] :limit The number of resources to return.
    # @option opts [Boolean] :shipped Return orders that are marked as shipped.
    # @option opts [Boolean] :posted Return orders that are synced to the seller.
    # @option opts [Boolean] :billed Return orders that are marked as billed/invoiced.
    # @option opts [Boolean] :refunded Return orders that are marked as refunded.
    # @option opts [String] :created_min Return resources created after a given time. Use RFC 3339 format.
    # @return [Array<(Array<Order>, Integer, Hash)>] Array<Order> data, response status code and response headers
    def get_orders_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_orders ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling OrderApi.get_orders"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling OrderApi.get_orders, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 250
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrderApi.get_orders, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrderApi.get_orders, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'shipped'] = opts[:'shipped'] if !opts[:'shipped'].nil?
      query_params[:'posted'] = opts[:'posted'] if !opts[:'posted'].nil?
      query_params[:'billed'] = opts[:'billed'] if !opts[:'billed'].nil?
      query_params[:'refunded'] = opts[:'refunded'] if !opts[:'refunded'].nil?
      query_params[:'createdMin'] = opts[:'created_min'] if !opts[:'created_min'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Order>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.get_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create invoice
    # Creates an invoice for the given order ID for manual billing. Currently for taxes, we support only `GS` (Goods & Services Tax) and `SP` (State/Provincial Sales Tax) values for `Type`. Invoices are only able to be generated after the order has been shipped. 
    # @param order_id [String] ID of the order to invoice
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param seller_order_invoice_tax [SellerOrderInvoiceTax] An object with tax specific settings for the invoice
    # @param [Hash] opts the optional parameters
    # @return [SellerInvoiceResponse]
    def invoice_order(order_id, authorization, seller_order_invoice_tax, opts = {})
      data, _status_code, _headers = invoice_order_with_http_info(order_id, authorization, seller_order_invoice_tax, opts)
      data
    end

    # Create invoice
    # Creates an invoice for the given order ID for manual billing. Currently for taxes, we support only &#x60;GS&#x60; (Goods &amp; Services Tax) and &#x60;SP&#x60; (State/Provincial Sales Tax) values for &#x60;Type&#x60;. Invoices are only able to be generated after the order has been shipped. 
    # @param order_id [String] ID of the order to invoice
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param seller_order_invoice_tax [SellerOrderInvoiceTax] An object with tax specific settings for the invoice
    # @param [Hash] opts the optional parameters
    # @return [Array<(SellerInvoiceResponse, Integer, Hash)>] SellerInvoiceResponse data, response status code and response headers
    def invoice_order_with_http_info(order_id, authorization, seller_order_invoice_tax, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.invoice_order ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.invoice_order"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling OrderApi.invoice_order"
      end
      # verify the required parameter 'seller_order_invoice_tax' is set
      if @api_client.config.client_side_validation && seller_order_invoice_tax.nil?
        fail ArgumentError, "Missing the required parameter 'seller_order_invoice_tax' when calling OrderApi.invoice_order"
      end
      # resource path
      local_var_path = '/orders/{orderId}/invoices'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(seller_order_invoice_tax)

      # return_type
      return_type = opts[:debug_return_type] || 'SellerInvoiceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.invoice_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#invoice_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fulfillment
    # An endpoint for creating fulfillments on orders. Order items that have been cancelled cannot be fulfilled.
    # @param order_id [String] ID of the order with the new fulfillment
    # @param order_fulfillment [OrderFulfillment] An object containing fulfillment details
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def post_fulfillment(order_id, order_fulfillment, opts = {})
      data, _status_code, _headers = post_fulfillment_with_http_info(order_id, order_fulfillment, opts)
      data
    end

    # Create fulfillment
    # An endpoint for creating fulfillments on orders. Order items that have been cancelled cannot be fulfilled.
    # @param order_id [String] ID of the order with the new fulfillment
    # @param order_fulfillment [OrderFulfillment] An object containing fulfillment details
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def post_fulfillment_with_http_info(order_id, order_fulfillment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.post_fulfillment ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.post_fulfillment"
      end
      # verify the required parameter 'order_fulfillment' is set
      if @api_client.config.client_side_validation && order_fulfillment.nil?
        fail ArgumentError, "Missing the required parameter 'order_fulfillment' when calling OrderApi.post_fulfillment"
      end
      # resource path
      local_var_path = '/orders/{orderId}/fulfillments'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_fulfillment)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2003'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.post_fulfillment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#post_fulfillment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create refund
    # Use this endpoint to add a refund to an existing order. This will add a new entry to the `refunds` array on the order object. If `cancelUnfulfilled` is set to true, then any item that is being refunded and is not already shipped will be cancelled as well as refunded. **Note that this endpoint does not currently handle return shipping or refund payout.
    # @param order_id [String] ID of the order to refund
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param seller_order_refund [SellerOrderRefund] An object with refund settings
    # @param [Hash] opts the optional parameters
    # @return [SellerOrderRefund]
    def refund_order(order_id, authorization, seller_order_refund, opts = {})
      data, _status_code, _headers = refund_order_with_http_info(order_id, authorization, seller_order_refund, opts)
      data
    end

    # Create refund
    # Use this endpoint to add a refund to an existing order. This will add a new entry to the &#x60;refunds&#x60; array on the order object. If &#x60;cancelUnfulfilled&#x60; is set to true, then any item that is being refunded and is not already shipped will be cancelled as well as refunded. **Note that this endpoint does not currently handle return shipping or refund payout.
    # @param order_id [String] ID of the order to refund
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param seller_order_refund [SellerOrderRefund] An object with refund settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(SellerOrderRefund, Integer, Hash)>] SellerOrderRefund data, response status code and response headers
    def refund_order_with_http_info(order_id, authorization, seller_order_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.refund_order ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.refund_order"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling OrderApi.refund_order"
      end
      # verify the required parameter 'seller_order_refund' is set
      if @api_client.config.client_side_validation && seller_order_refund.nil?
        fail ArgumentError, "Missing the required parameter 'seller_order_refund' when calling OrderApi.refund_order"
      end
      # resource path
      local_var_path = '/orders/{orderId}/refund'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(seller_order_refund)

      # return_type
      return_type = opts[:debug_return_type] || 'SellerOrderRefund'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.refund_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#refund_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update order
    # An endpoint for partially updating orders.
    # @param order_id [String] ID of the order to update
    # @param order_update [OrderUpdate] The order fields to update
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def update_order_by_id(order_id, order_update, opts = {})
      data, _status_code, _headers = update_order_by_id_with_http_info(order_id, order_update, opts)
      data
    end

    # Update order
    # An endpoint for partially updating orders.
    # @param order_id [String] ID of the order to update
    # @param order_update [OrderUpdate] The order fields to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def update_order_by_id_with_http_info(order_id, order_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.update_order_by_id ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.update_order_by_id"
      end
      # verify the required parameter 'order_update' is set
      if @api_client.config.client_side_validation && order_update.nil?
        fail ArgumentError, "Missing the required parameter 'order_update' when calling OrderApi.update_order_by_id"
      end
      # resource path
      local_var_path = '/orders/{orderId}'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_update)

      # return_type
      return_type = opts[:debug_return_type] || 'Order'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.update_order_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#update_order_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
